@page "/book"
@using HotelApp.Blazor.Models
@attribute [StreamRendering]
@inject ILogger<Bookings> logger
@inject IRoomService roomService
@inject IBookingService bookingService

<PageTitle>Bookigs: Book Available Room</PageTitle>

<h1>Available Bookings</h1>

<p>Shows data for all available rooms</p>

<EditForm Model="@this" FormName="Bookings">
    <label for="startDate">Start Date:</label>
    <InputDate id="startDate" @bind-Value="startDate" />

    <label for="endDate">End Date:</label>
    <InputDate id="endDate" @bind-Value="endDate" />

    <button type="submit">Submit</button>
</EditForm>

@if (availableRoomTypes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Type</th>
                <th>Description</th>
                <th>Price/Night</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var roomType in availableRoomTypes)
            {
                <tr>
                    <td>@roomType.Id</td>
                    <td>@roomType.Title</td>
                    <td>@roomType.Description</td>
                    <td>@roomType.BasePrice</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Room> rooms = new();
    private HashSet<RoomType> availableRoomTypes = new();
    private List<Booking> bookings = new();

    [SupplyParameterFromForm]
    private DateTime startDate { get; set; } = DateTime.Now;

    [SupplyParameterFromForm]
    private DateTime endDate { get; set; } = DateTime.Now;

    private void getAvailableRoomTypes()
    {
        rooms = roomService.GetRooms();
        bookings = bookingService.GetBooking(startDate, endDate);
        var roomTypes = roomService.GetRoomTypes();
        logger.LogInformation("Form submitted with Start Date: {StartDate} and End Date: {EndDate}", startDate, endDate);

        var groupedRooms = rooms.GroupBy(x => x.TypeId)
        .Select(grp => new
        {
            RoomTypeId = grp.Key,
            Count = grp.Count(),
        }).ToList();

        var groupedBookings = bookings.GroupBy(x => x.RoomTypeId)
        .Select(grp => new
        {
            RoomTypeId = grp.Key,
            Count = grp.Count(),
        }).ToList();

        // Process each room and substract booking
        foreach (var roomType in groupedRooms)
        {
            var booking = groupedBookings.Where(x => x.RoomTypeId == roomType.RoomTypeId).FirstOrDefault();
            if (booking is not null)
            {
                var diff = roomType.Count - booking.Count;
                if (diff > 0)
                {
                    availableRoomTypes.Add(roomTypes.Where(x => x.Id == roomType.RoomTypeId).First());
                }
            }
            else
            {
                // booking is null, means we can add the room
                availableRoomTypes.Add(roomTypes.Where(x => x.Id == roomType.RoomTypeId).First());
            }
        }
    }


    protected override void OnInitialized()
    {
        getAvailableRoomTypes();
    }
}
